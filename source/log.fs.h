/****************************************************************************************************************************
	Version 1.6

	log.fs - Модуль облегченной файловой системы сессионного типа для flash микросхем памяти.

	Единицей объема для файла является размер сектора flash памяти, во избежание необходимости буферизации
	нестираемой	части сектора и повышения быстродействия. Запись ведется сессиями. В случае нехватки места
	в одном секторе файл, переходит на запись следующего по порядку сектора. Также реализовано некоторое подобие
	кольцевого буфера. При полной заполнености накопителя, новые файлы пишутся поверх старых по кругу:
	от нулевого сектора до крайнего, потом переход на 0й и так далее 0....N -> 0.....N.
	Файлы (или сессии) не имеют имен, имеют только порядковый номер (ID) с момента форматирования накопителя.
	Каждый сектор содержащий файл имеет заголовок "FILE_EXIST_HANDLER" - Начало файла, либо FILE_CONTINUATION -
	Продолжение файла с предыдущего сектора (для 0 сектора предыдущим является последний).

	Для работы модуль хранит в ОЗУ только две управляющие приватные структуры core и fileSelector.
	core - ядро файловой системы, fileSelector используется для доступа к файлам.

	Навигация по файлам осуществляется функцией LogFs_findFIle(). Первое использование функции должно
	быть с командой FIRST_FILE, таким образом файловая система открывает для чтения файл-сессию
	с наименьшим порядковым номером (ID), после этого используя функцию LogFs_read () можно прочитать содержимое 
	файл либо скопировать в необходимо место. Функция  LogFs_read () позволяет читать один и тот же файл в несколько запросов,
	если нет возможности прочитать весь файл целиком (обычно в таком случае нужна буферизация в ОЗУ, что для больших файлов
	может быть проблемой), для этого функция позволяет указывать позицию чтения из файла, для того чтобы продолжить читать 
	файл с указанного места. Последующее использование функции LogFs_findFile() для доступа к остальным файлам должно происходить
	с командой NEXT_FILE. Таким образом мы получаем информацию о файле со следующим порядковым номером и так же можем его прочитать
	функцией LogFs_read(). То есть перемещение по директории между файлами с помощью данной функции происходит всегда 
	от файла с самым младшим id к файлу со старшим id.
	Так же навигация по файлам возможна с использованием функции LogFs_findFileByNum(), которая позволяет открывать файл с
	явно указанным порядковым номером (ID).


	Внимание!
		- При использовании данной файловой системы на носителях отличных от flash памяти, нужно быть осторожным,
		для файловой системы состояние пусто (стертая ячейка) - это "0xFF". Если на другом носителе это состояние отличается
		файловая система будет работать некорректно.
		- Так как эта файловая система сессионного типа представляющая собой циклический буфер, стирать можно только весь носитель
		целиком, а не отдельные файлы. Перезапись файлов при переполнении носителя берет на себя сама файловая система.
		- Для того, чтобы закрыть файл, необходимо переинициализировать файловую систему с помощью LogFs_initialize(). При уже
		открытом файле вызов LogFs_create() вернет ошибку.

****************************************************************************************************************************/
#ifndef _LOG_FS_H_
#define _LOG_FS_H_


#include "stdint.h"

#define FILE_EXIST_HANDLER  0xEFA7 // Заголовок - признак того, что данный сектор уже занят файлом
#define FILE_CONTINUATION   0xEFAC // Заголовок - признак того, что этот сектор не новый файл, а продолжение предыдущего
#define FREE_SPACE_HANDLER  0xFFFF // Заголовок - признак того, сектор свободен и тут может быть создан файл
#define HANDLER_SIZE        4      // Размер разметки сектора, байт


/************************************************************
	Команды функций
************************************************************/
typedef enum {
	FIRST_FILE,                      // Команда для LogFs_findFIle(FIRST_FILE); запускающая просмотр файлов и показывает свойства самого раннего файла в директории
	NEXT_FILE,                       // Команда для LogFs_findFIle(NEXT_FILE); позволяющая перейти к следующему файлу и узнать его параметры
	LAST_FILE,                       // Команда для LogFs_findFIle(LAST_FILE); позволяющая перейти сразу к просмотру последнего созданного файла
}LogFs_CMD;


/************************************************************
	Коды статуса в работе файловой системы
************************************************************/
typedef enum {
	FS_SUCCESS,                      // Успех
	FS_ERROR,                        // Ошибка
	FILE_SELECTOR_NOT_AT_END,        // Селектор файла указывает не на последний файл в директории
	FS_FILE_SELECTOR_AT_END,         // Селектор Файла указывает на последний файл в директории
	FS_INIT_DONE,                    // Инициализация выполнена
	FS_NOT_INIT,                     // Инициализация не выполнена
	FS_FILE_END,                     // Конец файла, возвращается когда функцией LogFs_read(); файл был прочитан целиком
	FS_FILE_OPEN,                    // Файл открыт на запись
}LogFs_Status;



/***************************************************************************************************
	LogFs_initialize - Функция проверки и инициализации файловой системы. Производит просмотр
	и анализ файловой системы, ищет созданые файлы, определяет положения первого
	и последнего файлов (по порядковому номеру), определяет количество занимаемых ими секторов,
	производит подсчет свободных секторов, подсчет имеющихся файлов, ищет свободное место
	в котором может быть создан файл. Заполняет управляющую структуру LogFs_info,
	которая обеспечивает работу файловой системы.

	Примечания: Необходимо вызывать эту функцию при начале работы с файловой системы
	(инициализация), и при закрытии текущей сессии/файла, перед созданием новой сессии/файла

	Возвращает:
				FS_SUCCESS - Система инициализированна удачно и готова к работе
				FS_ERROR - Неизвестное форматирование
***************************************************************************************************/
LogFs_Status LogFs_initialize(void);


/***************************************************************************************************
	LogFs_check - Функция проверки разметки используемого носителя
	Возвращает:
				FS_SUCCESS - Форматирование не нарушено
				FS_ERROR - Неизвестное форматирование
***************************************************************************************************/
LogFs_Status LogFs_check(void);


/***************************************************************************************************
	LogFs_totalSize - Размер носителя, байт
***************************************************************************************************/
uint64_t LogFs_totalSize(void);


/***************************************************************************************************
	LogFs_freeSpace - Свободное место на носителе, байт
***************************************************************************************************/
uint64_t LogFs_freeSpace(void);


/***************************************************************************************************
	LogFs_format - Форматирование накопителя (полная очистка с потерей всех данных)
	Параметры: NONE
	Возвращает: NONE
***************************************************************************************************/
void LogFs_format(void);


/***************************************************************************************************
	LogFs_getFileNumber - Получение информации о числе имеющихся файлов в директории
	Возвращает:
				Количество файлов в директории
***************************************************************************************************/
uint16_t LogFs_getFileNumber(void);


/***************************************************************************************************
	LogFs_getLastFileID - Узнать ID последнего созданного файла
	Возвращает:
				ID номер последнего созданного файла
***************************************************************************************************/
uint16_t LogFs_getLastFileID(void);


/***************************************************************************************************
	LogFs_create - Функция создания сессии/файла. Ищет свободное место не диске, если
	его нет, удаляет самый старший файл в директории, создает в свободном месте заголовок файла
	и присваивает файлу порядковый номер с момета создания первого файла в ФС.
	Примечание:  В случае полной заполненности памяти, при создании файла - произойдет вызов
	этой функции. Она удалит самый старый из имеющихся файлов и произведет очистку секторов,
	которые он занимал.
	Возвращает:
				NONE
***************************************************************************************************/
void LogFs_create(void);


/***************************************************************************************************
	LogFs_write - Функция записи информации в файл.
	Примечания: Должна вызываться только после LogFs_initialize(); и LogFs_create(); иначе
	поведение не предсказуемо
	Параметры:
				Buffer      - Указатель на буфер, откуда брется информация для запили
				Size        - Размер в байтах, записываемой информации
	Возвращает:
				NONE
***************************************************************************************************/
void LogFs_write(uint8_t* buffer, uint32_t size);


/***************************************************************************************************
	LogFs_findFile - Функция осуществляет навигацию по файловому хранилищу.
	Примечания:
				1. Первый вызов этой функции должен сопровождаться командой "FIRST_FILE". Эта
				Команда инициализирует структуру "LogFs_FileProperties" и даёт нам информацию о самом
				старом файле в директории.
				2. Для получения информации о других файлах, после вызова с командой "FIRST_FILE"
				можно просматривать последовательно от самого старого к самому новому (другой порядок
				невозможен), когда будет получена информация о самом новом файле, функция вернет
				признак того, что был прочитан последний файл "FS_FILE_SELECTOR_AT_END".
				3. Командой LAST_FILE можно так же инициализировать структуру (вместо "FIRST_FILE")
				и получить информацию сразу о самом новом файле, после чего функция так же вернет
				"ALL_FILES_SCROLLS".
				4. Для того, чтобы опять посмотреть информацию о файлах, после выдачи функцией
				"ALL_FILES_SCROLLS", структуру LogFs_FileProperties нужно снова инициализовать. См п.1
				или п.3.
	Параметры:
				CMD     - Команда, определяющая  режим выполнения функции
	Возвращает:
				ERROR   - Структура не была проинициализирована
						- Неопознаная команда
						- Ошибка в файловой системе, заголовок начала данного файла не найден
				FS_FILE_SELECTOR_AT_END - Все файлы были успешно просмотрены
				FILE_SELECTOR_NOT_AT_END - Еще остались файлы, которые можно просмотреть.
***************************************************************************************************/
LogFs_Status LogFs_findFile(LogFs_CMD cmd);


/***************************************************************************************************
	LogFs_getFileProperties - Функция позволяет узнать размер файла, который был выбран
	функцией "LogFs_findFile"
	Возвращает:
				Размер в байтах файла
***************************************************************************************************/
uint32_t LogFs_getFileSize(void);


/***************************************************************************************************
	LogFs_getFileID - Функция позволяет узнать ID файла, который был выбран
	функцией "LogFs_findFile"
	Возвращает:
				Порядковый номер файла (ID) в хранилище;
***************************************************************************************************/
uint32_t LogFs_getFileID(void);


/***************************************************************************************************
	LogFs_findFileByNum - Функция осуществляет поиск файла по номеру.
	Параметры:
				NUM - Порядковый номер файла, который требуется найти в хранилище
	Возвращает:
				FS_ERROR - Такого файла не существует
				FS_SUCCESS  - Файл найден, готов к чтению
***************************************************************************************************/
LogFs_Status LogFs_findFileByNum(uint16_t id);


/***************************************************************************************************
	LogFs_read - Функция чтения информации из файлов. Должна запускаться только после функции
	LogFs_findFile(), поскольку эта функция и позволяет нам определить какой файл будем
	читать. То, какой файл будем читать содержится в структуре LogFs_FileProperties.
	Примечания:
			1. Перед использованием нуобходимо получить информацию о необходимом файле
			с помощью LogFs_findFile(). Как только желанный файл был найден
			и структура "LogFs_FileProperties" будет содежать информацию о нем,
			файл готов к считыванию.
			2. Функция позволяет читать файл c любого места, нужно указать лишь
			ByteNum, как номер байта в файле с которого будет считано Size байт
	Параметры:
				Buffer     - Указатель на буфер, откуда брется информация для запили
				ByteNum    - Номер байта в файле с которого начнётся считывание информации
				Size       - Размер в байтах, записываемой информации
	Возвращает:
				FS_ERROR - Если ошибка в параметрах (стартовый байт и размер чтения)
				FS_SUCCESS	 - Цикл чтения завершен, но конец файла не достигнут
***************************************************************************************************/
LogFs_Status LogFs_read(uint8_t* buffer, uint32_t position, uint32_t size);


#endif
